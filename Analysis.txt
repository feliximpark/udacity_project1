Analysis Project Unscramble Computer Science Problems
by Christoph Knoop



TASK0

import csv: 1 process

open texts, calls = 6 processes

def find_first_text(texts):  1 process, no change due to large parameters = O(1)

def find_last_call(calls): 1 process, no change due to large parameters = O(1)

def text_output(text,calls): 2 processes, no change due to large parameters = O(1)


O-Notation of the whole algorithm (loading data included):
O(1)






TASK1

import csv: 1 process

open texts, calls = 6 processes

def count_telnumbers_in_lists(calls, texts): two for-loops, each with 3 processes, order is linear. 2 processes outside the loop = =(6n+2)

O-Notation of the whole algorithm (loading data included): 
O(6n+9), simplified: O(n), order is linear.






TASK2


import csv: 1 process

open texts, calls = 6 processes

def create_dict(data): 1 for-loop with 3 processes. Order is linear. 2 processes outside the loop = O(3n+2). 

def find_highest_dictvalue(dic): no loops. 3 processes, no change due to larger parameters. But max()-Function, which has to check in worst-case-scenario 551 values of the dict. 
(O(551n+3))

def find_longest_telephonetime(data): final function calling the helper-functions. 3 processes (function calls), no change due to larger parameters = 0(1)

O-Notation of the whole algorithm (loading data included): 
O(554n+12), simplified: O(n), order is linear.








TASK3


import csv: 1 process

open texts, calls = 6 processes

def find_numbers_called_from_Bangalore(data): 1 for-loop with if-clauses, 5218 processes inside the for-loop in worst-case-scenario. 2 processes outside the loop. O(5218n+2), order is linear. 

def print_all_arecodes(set_prefixes): one for-loop with 2 processes each iteration. 1 process outside the loop. O(2n+1), order is linear. 

def examine_bangalore_calls(data): sorted-method invoked, 5 more processes. O(n logn+5)



O-Notation of the whole algorithm (loading data included): 
O = (521n logn + 15), simplified O(n logn)







TASK4

import csv: 1 process

open texts, calls = 6 processes

def check_all_numbers(call, text): 4 for-loops in comprehensions with each 1 process inside. 1 for-loop with if-statement, in worst-case-scenario you have to check all textsender-numbers, all textreceiver-numbers, all callreceiver-numbers, all in all 964 processes. 1 sorted-method. 2 processes outside the loop. 
= O(968n logn + 2)

def print_marketing_nums(calls, texts): for-loop with 2 process for each iteration. 2 processes, no change due to larger parameters. = O(2n+2)

O-Notation of the whole algorithm (loading data included): 
O(968n logn +11), simplified O(n logn).








